==============================================================================
0章 目次

     1章 はじめに                                                 [   11行目 ]
     2章 Vimの設定を変更する                                      [   30行目 ]
     3章 キーマップを変更する                                     [  194行目 ]
     4章 コマンドを定義する                                       [  427行目 ]
     5章 autocommand(自動コマンド)                                [  570行目 ]
     6章 関数を定義する                                           [  763行目 ]

==============================================================================
1章 はじめに                                                         <  19行 >

      このファイルは本家Vimのチュートリアルの延長を想定して作成しました。
      Vimの設定を変更する方法を書いてあります。

      モードの概念がわかる程度の知識があるレベルを想定して書いています。
      そのため、説明が少し優しくないかもしれません。

      基本的な設定しか変更しないため、Vimをほとんど触っていない人でも戸惑う事
      がないように配慮してありますが、もしよくわからない動作になった場合は、

      また、このチュートリアルでは、まずは実際にやってみる。その後に設定の方法
      を解説する。という形を取っています。

  NOTE:
      ここでは～とタイプしましょう。という表記で、それが : から始まっていた場
      合は最後に<Enter> キーを押して下さい。

==============================================================================
2章 Vimの設定を変更する                                              < 164行 >

------------------------------------------------------------------------------
                        2.1 Vimの設定の変更方法の基本

      これからVimの設定を変更していきます。

  1. :set number とタイプしてみましょう。

      左に行番号が表示されたかと思います。

      このようにVimの設定では、 set オプション名 と打つ事で
      そのオプションを有効に出来ます。
      このオプションというのはVimでは沢山あり、目的に応じて設定するものです。
      検索するなどをして色々試してみて下さい。

  2. :set nonumber とタイプしてみましょう。

      左の行番号が非表示になったかと思います。

      先程の説明では、有効にするだけでしたが、無効にするにはどうしたら…
      と思った人もいるかと思います。
      オプション名の前に no を付ける事で、そのオプションを無効に出来ます。

  NOTE:
      noが使えない例外もあります。
      helpファイルで色々オプションを見てみましょう。

------------------------------------------------------------------------------
                            2.2 よく使うオプション

      ここでは、オプション名は''で囲って表記します。
      Ex: 'オプション名'

      また、特筆しない限り、 :set オプション名 / noオプション名 
      で有効/無効が可能です。

  1. 'ignorecase'

      検索時大文字小文字を無視することが出来ます。

  NOTE:
      'smartcase' を設定することで、
      大文字を入力した時だけ、無視しない設定に出来ます。

  2. 'incsearch'

      インクリメンタルサーチを有効にすることが出来ます。

  3. 'hlsearch'

      検索時ハイライトをすることが出来ます。

  4. 'wrapscan'

      検索時一番下まで検索した場合、一番上から検索を開始します。
      また、その逆の動作もします。

  5. 'autoindent'

      改行時に自動でインデントをしてくれます。

  NOTE:
      'smartindent' を使うとよりいい感じになります。

  6. 'showcmd'

      現在入力中のコマンドを画面の右下に表示します。

  7. 'autoread'

      編集中のファイルに変更があった場合、自動で読み込むようになります。
      このオプションがオンでないと、自動で読み込まれません。

  8. 'title'

      編集中のファイル名を表示します。

  9. 'showmatch'

      括弧入力時に対応する括弧を強調します。

  10. 'list'

      編集中のファイル名を表示します。

------------------------------------------------------------------------------
                      2.3 変更した設定を起動時に反映させる

      今までやってきた設定では、一度Vimを閉じてしまうと、次にVimを開いた時には
      その設定が失われてしまいます。
      Vimでは .vimrc というファイルを用いて、Vimの設定を起動時に読み込ませる事
      が出来ます。

  1. .vimrc ファイルの場所を確認しましょう。

      Unix系ではホームディレクトリ配下になります。
      Windowsではユーザーフォルダ配下になります。

      まだ、自分で vimrc ファイルを作っていない場合は存在しないと思います。

  2. .vimrc ファイルを作成しましょう。

      既に存在する場合は、作成しなくてよいです。
      作成方法は問いません。

  3. .vimrc ファイルを開きましょう。

      e ~/.vimrc で編集が出来ます。
      
  NOTE:
      ~ はホームディレクトリを示しています。
      Windowsの場合はユーザーフォルダになります。

  4. set number とファイルに書き込みましょう。

      : を記入しない事に注意して下さい。
      vimrc ファイルに設定を書く場合は不要です。

  NOTE:
      vimrc ファイルに設定を書く場合は : が不要な点に注意して下さい。
      この後にある、キーマップやコマンドなども vimrc に書く事が出来ます。
      vimrc に書く事が出来るのは Vimのコマンドラインで使用するコマンドが
      書く事が出来ると思ってもらって構いません。

  5. Vim を終了させて、もう一度起動してみましょう。

      行番号が表示されていると思います。

------------------------------------------------------------------------------
                                  2章 まとめ

  1. Vimの設定の変更方法の基本

      :set オプション名   : オプションを有効化する
      :set noオプション名 : オプションの無効化する

      Ex:
      :set number
      :set nonumber

  2. よく使うオプション

      'ignorecase' : 検索時大文字小文字の無視
      'incsearch'  : インクリメンタルサーチを有効化
      'hlsearch'   : 検索時ハイライト
      'wrapscan'   : 検索時ファイルを回るように検索可能
      'autoindent' : 改行時に自動でインデント
      'showcmd'    : 現在入力中のコマンドを画面の右下に表示
      'autoread'   : 編集中のファイルに変更時自動で再読み込み
      'title'      : 編集中のファイル名を表示
      'showmatch'  : 括弧入力時に対応する括弧を強調表示
      'list'       : 編集中のファイル名を表示

  NOTE:
      その他にも沢山オプションはあります。色々調べてみて下さい。

  3. 変更した設定を起動時に反映させる

      Unix系ではホームディレクトリ配下、Windowsではユーザーフォルダ配下に
      .vimrc ファイルを作成。
      そこに自分の設定したい内容を記述。

==============================================================================
3章 キーマップを変更する                                             < 233行 >

------------------------------------------------------------------------------
                         3.1 キーマップを変更してみる

  1. :nnoremap j k とタイプしてみましょう。

      これは、j キーを押した時に、k キーの動作をするキーマップです。
      ノーマルモードだけが対象になってます。

      まず左の nnoremap というのは キーをマップするコマンドです。
      キーをマップするコマンドには色々あります。
      詳しくは後で解説します。
      その後にある左のキー j を 右のキー k の動作にするという事をしています。

  2. :nunmap j とタイプしてみましょう。

      j キーの動作が元に戻ったかと思います。

      これは nunmap の後に指定したキー今回は j キーのマップを削除するコマ
      ンドです。

------------------------------------------------------------------------------
                       3.2 キーマップコマンドの解説

  1. キーマップ

      キーマップのコマンドにはいくつかの種類があります。
      大きく分けて2種類あります。noremap と map です。
      どちらもキーマップをするコマンドですが、違いがあります。
      少し踏み込んだ設定をする時に、理解できていればいいかと思います。

  2. noremap コマンド

      noremap キー1 キー2 のように使用します。
      キー1 を キー2 にマップする事が可能です。
      コマンドとキー1,キー1とキー2の間をスペースで区切るのがポイントです。

      通常では、こっちのコマンドしか使用しません。

  3. map コマンド

      同じく、 map キー1 キー2 のように使用します。
      キー1 を キー2 にマップする事が可能です。
      map コマンドでは、このマップが使用された時に、 キー2 のマップが展開され
      使用されます。
      これにより入れ子や再帰的なキーマップが使用可能です。
      どういう事かと言うと、キー1 を押した時に、 キー2 のマップがまた呼び出さ
      れ、キー1 で キー2 のマップ先のキーになるという事です。

      例えば、 j キーに k キーを map コマンドでマップしていた時に
      同時に k キー を l キーにマップしていたとします。

      この場合、 j キーを押した場合、k キー となるはずですが、
      その k キーにもマップされているため、 k キー のマップが l キーのマップに
      展開されます。
      その結果、 j キー → k キー → l キー といったように最終的には、
      j キーを押したら、l キーになります。

  NOTE:
      通常では、mapコマンドは使用しません。無理に覚えなくていいです。
      map でキーマップを作成した場合、マップ先のキーがキーマップを保有してい
      る場合、そのキーマップが適用(再マップ)される事に注意して下さい。
      これは再帰的に行われます。

      また、 nnoremap または map では全てのモードにマップされる為、
      モードを指定してキーマップをする事が通常です。
      何故ならノーマルモードを想定したマップをした場合、インサートモードでは
      その文字列がそのままタイプされるだけとなってしまいます。

------------------------------------------------------------------------------
                              3.3 キーの指定方法

  1. 普通のキーを指定したい場合。(j k 1 * など)

      以下のように普通に記述すればよい。
      j キーを * キーにマップ nnoremap j *
      k キーを 1 キーにマップ nnoremap k 1

  2. Shiftと同時押しのキーを指定したい場合。

      以下のように大文字で記述すればよい。
      Shiftを押しながら j キーを ; キー にマップ nnoremap J ;
      Shiftを押しながら k キーを ! キー にマップ nnoremap K !

  3. Ctrlと同時押しのキーを指定したい場合。

      少し特殊になるが、以下のように <C-指定したいキー> とすればよい。
      Ctrlを押しながら j キーを - キー にマップ nnoremap <C-j> -
      Ctrlを押しながら k キーを + キー にマップ nnoremap <C-k> +

  4. BackSpace,Enter(Return)などの特殊なキーを指定したい場合。

      一部のキー(2文字以上から成るキーなど)は例外で、以下の様に指定する。
      Enter/Return キー を 1 キー にマップ nnoremap <CR> 1
      BackSpace    キー を 2 キー にマップ nnoremap <BS> 2
      Tab          キー を 3 キー にマップ nnoremap <Tab> 3
      Esc          キー を 4 キー にマップ nnoremap <Esc> 4
      Space        キー を 5 キー にマップ nnoremap <Space> 5
      F1           キー を 6 キー にマップ nnoremap <F1> 6

  NOTE:
      Alt キーを使ったマップは少し特殊です。
      :help :map-alt-keys を参照して下さい。

------------------------------------------------------------------------------
                       3.4 モードごとにキーマップをする

      モードごとにキーマップを設定するにはマップのコマンドの先頭に
      モードの頭文字をつければいいだけです。

  1. nnoremap または nmap

      ノーマルモードだけにマップする

  2. inoremap または imap

      インサートモードだけにマップする

  3. vnoremap または vmap

      ヴィジュアルモードだけにマップする

  NOTE:
      通常の nnoremap または map では全てのモードにマップされる為、
      モードを指定してキーマップをする事が通常です。
      何故ならノーマルモードを想定したマップをした場合、インサートモードでは
      その文字列がそのままタイプされるだけとなってしまいます。

      また、他にも色々あります。:help mapping で探してみて下さい。

------------------------------------------------------------------------------
                         3.5 設定したマップを削除する

  1. マップの削除をする unmap コマンド

      基本的に map / nnoremap コマンドと変わりがありません。
      違いがあるとしたら、削除するキーの指定のみになるので、指定するキーは1つ
      だけになります。
      また、モードの頭文字を付ければそのモードだけでのマップの削除となります。

      Ex: nunmap j

------------------------------------------------------------------------------
                         3.6 設定したマップを確認する

  1. :map と 何のキーの指定もせず、タイプしてみて下さい。

      キーの指定をしない場合は、キーマップが全て一覧表示されます。
      また、nmap などでも同様に利用可能で、
      そのモードだけのマップを対象に出来ます。

  NOTE:
      また、 :map キー とキーの指定をした場合は、そのキーから始まるキーマップ
      が一覧表示されます。

      noremap はこの用途では利用出来ません。

------------------------------------------------------------------------------
                      3.7 キーマップコマンドのオプション

      マップコマンドでは引数により様々な動作を指定する事が出来ます。
      慣れてきたら使用するといいと思います。
      必要に応じてこの内容は飛ばして構いません。
      ここでは、一部を紹介します。
      また、オプションは以下のように指定する事で使用出来ます。

      Ex: nnoremap オプション j k

  1. <buffer> オプション

      カレントバッファだけで使用出来るマップを作成します。
      他のバッファではこのマップは使用出来ません。

      Ex:
      nnoremap <buffer> j k

  NOTE:
      この <buffer> オプションは unmap コマンドでも使用出来ます。

  2. <silent> オプション

      実行するコマンドがコマンドラインに表示されないようにする。

  NOTE:
      詳しく知りたい場合は :help :map-arguments を参照して下さい。

------------------------------------------------------------------------------
                                  3章 まとめ

  1. キーマップを変更してみる

      :nnoremap j k : j キーに k キーマップする
      :nunmap j     : j キーのマップを解除する

  2. キーマップコマンドの解説

      :nnoremap キー1 キー2 : キー1 を キー2 にマップ
      :map キー1 キー2      : キー1 を キー2 にマップ。再マップされる

  3. キーの指定方法

      普通のキー           : j 1 * などそのまま記述
      Shiftと同時押し      : J K など大文字で記述
      Ctrlと同時押しのキー : <C-j> など <C- > を付けて記述
      特殊なキー           : <CR> <BS> などキーに応じて記述

  NOTE:
      Alt キーを使ったマップは少し特殊です。
      :help :map-alt-keys を参照して下さい。

  4. モードごとにキーマップをする

      ノーマルモード     : :nnoremap または :nmap
      インサートモード   : :inoremap または :imap
      ヴィジュアルモード : :vnoremap または :vmap

  5. 設定したマップを削除する

      :unmap キー  : 指定したキーマップを削除する
      :nunmap キー : 指定したキーマップを指定モードのみで削除する

  6. 設定したマップを確認する

      :map      : マップの一覧表示
      :map キー : 指定したキーのキーマップを表示

  7. キーマップコマンドのオプション

      <buffer> オプション : カレントバッファのみにキーマップする
      <silent> オプション : コマンドラインに表示されないようにする

==============================================================================
4章 コマンドを定義する                                               < 143行 >

------------------------------------------------------------------------------
                          4.1 コマンドを定義してみる

  1. :command! Test echo 'test' とタイプしてみましょう。

      これは、:Test とタイプした時 test と出力するコマンドです。

  2. :Test とタイプしてみましょう。

      これは、:Test とタイプした時 test と出力するコマンドです。
      画面左下に test と出力されたかと思います。
      このように簡単に、コマンドが定義出来ます。

  3. 今度は、 :delcom Test とタイプしてみましょう。

      これは、コマンドを削除するコマンドです。
      試しに :Test ともう一度タイプしてみるといいと思います。

------------------------------------------------------------------------------
                           4.2 コマンドの定義の解説

  1. コマンドの定義の仕方

      :command コマンド名 Exコマンド の形式でコマンドが定義できます。
      Exコマンドが使えないと、コマンドを定義する意味はあまりありません。
      是非Exコマンドを使えるようにしましょう。
      また、ユーザーにより定義された大文字から始まるコマンドを
      ユーザー定義コマンドと言います。

  NOTE:
      但し、コマンド名は大文字から始まらなければならなく、被ってはいけません。
      被った場合は、エラーが出ます。

  2. 必ずコマンドを定義する時に上書きする(最新の物を使用する)

      先程の command では同じ名前で被った時、エラーが起きてしまいます。
      もし、コマンドの定義を間違えてしまった場合などに不便だと思います。
      その場合、 command の末尾に command! と ! をに付けるだけで大丈夫です。
      これにより、新しく定義された物でコマンドの内容が上書きされます。

  NOTE:
      これは vimrc などに書く際に使います。
      面倒だったらとりあえず ! を付けておいてもいいと思います。

------------------------------------------------------------------------------
                       4.3 定義されているコマンドの削除

  1. 定義されているコマンドを削除する。

      :delcom コマンド名 で削除が可能です。

  NOTE:
      ユーザーにより定義された大文字から始まるコマンドのみが削除可能です。
      使わないからとVimのコマンドの削除は出来ません。
      使う事はないですが、 :comc で全てのユーザー定義コマンドが削除可能です。

------------------------------------------------------------------------------
                              4.4 コマンドの確認

  1. 定義されているコマンドを一覧表示する。

      :com で一覧表示が可能です。

  2. コマンド名を指定して一覧表示する。

      :com コマンド名 で指定したコマンド名から始まるコマンドを一覧表示します。
      指定したコマンド名から始まるコマンドが一覧表示されます、曖昧な場合でも使
      えます。

------------------------------------------------------------------------------
                         4.5 コマンド定義のオプション

      コマンドを定義する際にオプションの指定が出来ます。
      慣れてきたら使用するといいと思います。
      必要に応じてこの内容は飛ばして構いません。
      ここでは、一部を紹介します。
      また、オプションは以下のように指定する事で使用出来ます。

      Ex: command! オプション Test echo 'test'

  1. 引数を取れるようにする

      以下のオプションを設定し、コマンドの内容に、<f-args> または、 <q-args>
      を引数の文字列の置き換えテキストとして使用して下さい。
      実際に使用した際は、 <f-args> または <q-args> の部分に引数が入ります。
      この2つの違いは、helpファイルを見て下さい。

      -nargs=1 : 引数1
      -nargs=* : いくつでも
      -nargs=+ : 必ず必要

      Ex: command! -nargs=+ Test echo <f-args>

  2. カレントバッファのみで使用可能にする

      -buffer : カレントバッファのみでコマンドが使用可能とする。

      Ex: command! -buffer Test echo 'Test'

  NOTE:
      詳しく知りたい場合は :help :command-nargs 以降を参照して下さい。

------------------------------------------------------------------------------
                                  4章 まとめ

  1. コマンドを定義してみる

      :command! Test echo 'test' : コマンド :Test に :echo 'test' を定義する
      :delcom Test : コマンド :Test を削除する

  2. コマンドの定義の解説

      :command コマンド名 Exコマンド  : Exコマンドを :コマンド名 に定義
      :command! コマンド名 Exコマンド : Exコマンドを :コマンド名 に定義(上書)

  NOTE:
      但し、コマンド名は大文字から始まらなければならなく、被ってはいけません。
      被った場合は、 ! を末尾に付けていないなら、エラーが出ます。

  3. 定義されているコマンドの削除

      :delcom コマンド名 : コマンドを削除

  4. 設定したコマンドを確認する

      :com            : コマンドの一覧表示
      :com コマンド名 : 指定したコマンド名から始まるコマンドを一覧表示

  5. コマンド定義のオプション

      -nargs=1 : 引数1
      -nargs=* : いくつでも
      -nargs=+ : 必ず必要
      -buffer : カレントバッファのみでコマンドが使用可能とする。

  NOTE:
      引数を使用する場合、<f-args> または、 <q-args>を
      引数の文字列の置き換えテキストとして使用して下さい。
      その他にも沢山オプションはあります。色々調べてみて下さい。

==============================================================================
5章 autocommand(自動コマンド)                                        < 200行 >

------------------------------------------------------------------------------
                             5.1 autocommandとは

      まず、autocommand(自動コマンド)がどのようなものか知ってもらう為に
      実際に体験してもらいたいと思います。
      また、以下では autocmd と表記します。

  1. :au BufEnter * silent! call append(1,'test')とタイプしてみましょう。

  2. :new とタイプしてみましょう。

      新規に作成されたバッファに文章が勝手に追加されたかと思います。

      このように特定の条件の時に自動でExコマンドを実行出来るのが
      autocmdです。
      使い方次第ではかなり便利になりますが、難易度も高く、
      失敗すると悲惨な事になりかねないので注意して下さい。

  3. このままでは文書が追加されるままなので:au! BufEnter * とタイプして下さい。

------------------------------------------------------------------------------
                            5.2 autocmdの定義

  1.  autocmdの定義

      :au イベント パターン Exコマンド の書式で定義が可能です。
      パターンに一致したファイルでイベント発生の時にExコマンドを実行する事が
      可能です。

      イベントとは、例えば、ファイルを開いた時、保存した時などです。
      また、詳しい一例は次の項目で紹介します。

------------------------------------------------------------------------------
                                 5.3 イベント

      ここでは、イベントの種類を挙げていきます。

  1.  BufRead

      ファイルを読み込んだ時、及び新しいバッファの編集を始めた時

  2.  BufWrite

      ファイルに書き込んだ時

  3.  FileType

      特定のファイルタイプの時(ファイルタイプが設定された時)

  4.  BufEnter

      バッファに入った時(編集を始める時等)

  5.  VimEnter

      Vim起動時(全ての起動処理が終了した後)

  NOTE:
      他にも沢山イベントがあります。
      :help autocmd-events を参照して下さい。

------------------------------------------------------------------------------
                                 5.4 パターン

  1.  パターンの指定方法

      ファイル名の指定をすれば構いません。また、拡張子での指定も可能です。
      ワイルドカードが使用可能です。
      例えば、file.txt という名前のファイルで使用したい場合、 file.txt と書く事
      で可能です。
      また、htmlファイルで指定したいならば、 *.html で指定可能です。
      全てを指定したい場合は、 * で指定可能です。

  2.  特殊なパターンの指定方法

      カレントバッファのみに指定したい場合があると思います。
      <buffer> を使用する事によりカレントバッファのみで指定が出来ます。

      Ex: :au BufNew <buffer> echo 'test'

------------------------------------------------------------------------------
                              5.5 autocmdの削除

  1.  autocmdを削除する

      :au! イベント パターン で指定した条件に一致する autocmd を削除出来ます。
      また、全ての autocmd を削除したい場合、 :au! のみで可能です。

------------------------------------------------------------------------------
                            5.6 autocmdを確認する

  1.  :au とタイプしてみましょう。

      autocmd が一覧表示されます。

  NOTE:
      :au の後に イベント パターン を指定することでその条件で絞り込む事
      が可能です。

      また、後で説明するグループでも絞り込む事が可能です。
      その場合、 :au グループ名 イベント ... の順番で記述出来ます。

------------------------------------------------------------------------------
                                 5.7 グループ

      今までの説明を元にautocmdを設定する事が可能ですが、
      実際に設定する場合は、注意が必要です。
      実際に設定する場合、グループという物を使用します。
      グループとは、その名の通り、autocmdをグループにまとめる機能です。
      以下の手順でautocmdをtestグループに入れる事が出来ます。

  1. :aug test とタイプしましょう。

      このコマンドは、:aug グループ名 で指定したグループに
      現在のグループを換える事が出来ます。

  2. :au! とタイプしましょう。

      このコマンドは、全てのautocmdを削除するコマンドです。
      なぜ全て削除するかというと、このグループの中身を空にする為です。

  3. autocmdを定義しましょう。

      上記の2つを必ず行ってから定義しましょう。

  4. :aug END とタイプしましょう。

      ENDグループは予約語で決まっており、グループ名には指定出来ません。
      また、ENDグループはVimの標準のグループです。

      この流れにより、autocmdをtestグループに入れる事が出来ます。
      最後にENDグループに戻すのを忘れないように注意しましょう。

  5. :aug とタイプしましょう。

      既にあるグループを一覧表示出来ます。

  6. :aug! test とタイプしましょう。

      testグループを削除されました。
      :augで確認してみましょう。
      このように:aug! グループ名 でグループ名の削除が可能です。

  NOTE:
      単独のauをグループに入れたい場合、:au グループ名 イベント…
      でグループに入れ、定義する事が可能です。

------------------------------------------------------------------------------
                                  5章 まとめ

  1. autocmd(autocommand、自動実行コマンド)とは

      条件を満たした場合に、自動で実行されるコマンドのこと。

  2. autocmdの定義

      :au イベント パターン Exコマンド  : パターンに一致したファイルで、
                                          イベント時にExコマンドを実行する

  3. イベント

      BufRead  : ファイル読み込み時、新規バッファ編集時
      BufWrite : ファイル書き込み時
      FileType : 特定のファイルタイプ時
      BufEnter : バッファに入った時
      VimEnter : Vim起動時

  NOTE:
      その他にも沢山イベントはあります。色々調べてみて下さい。

  4. パターン

      file.txt : 普通にファイル名を指定
      *.html   : 拡張子を指定
      *        : 全てのファイルを指定
      <buffer> : カレントバッファを指定

  5. 定義されているautocmdの削除

      :au! イベント パターン : 条件に一致するautocmdを削除

  6. autocmdを確認する

      :au                   : autocmdを一覧表示
      :au イベント パターン : 条件に一致するautocmdを一覧表示

  7. グループ

      :aug グループ名  : グループ名に切り換える
      :aug END         : 既定のグループに戻す
      :aug             : グループを一覧表示
      :aug! グループ名 : グループ名を削除

  NOTE:
      単独のauをグループに入れたい場合、:au グループ名 イベント…
      でグループに入れ、定義する事が可能です。

==============================================================================
vi:set ts=8 sts=4 tw=78 nonu:
