===============================================================================
0章 目次

     1章 はじめに                                                 [   15行目 ]
     2章 移動                                                     [   60行目 ]
     3章 編集 - ノーマルモード -                                  [  209行目 ]
     4章 編集 - インサートモード -                                [  440行目 ]
     5章 編集 - ヴィジュアルモード -                              [  596行目 ]
     6章 編集 - 応用編 -                                          [  747行目 ]
     7章 テキストオブジェクト                                     [  818行目 ]
     8章 矩形選択                                                 [  968行目 ]
     9章 ウィンドウ                                               [ 1059行目 ]
    10章 Exコマンド                                               [ 1206行目 ]

===============================================================================
1章 はじめに                                                         <  43行 >

      このファイルは本家Vimのチュートリアルの延長を想定して作成しました。
      vimtutorにはない物で便利なもの、自分がよく使うものを入れてあります。
      モードの概念がわかる程度の知識があるレベルを想定して書いています。
      そのため、説明が少し優しくないかもしれません。

      このファイルを書くにあたってvimtutor日本語訳を参考にさせてもらいました。

      また、vimtutorをやったことがない人はvimtutorを先にやりましょう。
      起動方法:
        1. ターミナルで vimtutor とタイプ
        2. Kaoriya版を使用している場合 Vim / GVim 上で :Tutorial とタイプ

      このチュートリアルは覚えるまで反復して学習する事を推奨します。

      0章の右の [ ～行目 ] というのはその章の始まりを示しています。
      また、各章の右の < ～行 > というのはその章が何行あるかを示しています。
      空白等を含んだおおよその行数なので目安程度だと思ってください。

      各章では、ノーマルモードで開始している事を想定しています。

      NOTE:
      このファイルでは以下のようにキーを表記するので注意してください。
      また、キーと文字の間にスペースを挟むことで読みやすくしていますので、
      スペースは実際には押さないで下さい。

        h 小文字のh ---> キーボードの h キーを示す
        H 大文字のh ---> キーボードの Shift キーと h キーを同時に押す事を示す。
        <C-h>       ---> キーボードの Ctrl キーと h キーを同時に押す事を示す。
        :h          ---> コマンドモードで h コマンドを実行する事を示す。

      実際には以下のように書かれています。

        <C-r> a     ---> Ctrl キーと r キーを同時に押した後に a キーを押す。
        zz          ---> z キーを2回押す。

      NOTE:
      このファイルでは以下の用語を使用します。
      ノーマルモード     : 通常のVimのモードのこと
      インサートモード   : 文字を入力するモードのこと、i,aなどで遷移
      ヴィジュアルモード : 範囲を選択するモードのこと、v,Vなどで遷移
      カウント           : コマンドの前に回数指定することで、指定回数繰り返せる

===============================================================================
2章 移動                                                             < 149行 >

-------------------------------------------------------------------------------
                  2.1 画面(ウィンドウ)単位で移動するコマンド

  下記のコマンドで移動した後はこの画面に戻りましょう。
  わからなくなったら、 :63 で戻ってくる事が可能です。

  1. <C-b> キーを押してみましょう。

      Ctrl キーと b キーの同時押しです。
      1画面分上に移動したと思います。

  2. <C-f> キーを押してみましょう。

      1画面分下に移動したと思います。

  3. <C-u> キーを押してみましょう。

      半画面分上に移動したと思います。

  4. <C-d> キーを押してみましょう。

      半画面分下に移動したと思います。

-------------------------------------------------------------------------------
                      2.2 現在の画面内を移動するコマンド

  1. H キーを押してみましょう。

      Shift キー と h キーの同時押しです。
      現在見えている画面の1番上に移動したと思います。

  2. M キーを押してみましょう。

      現在見えている画面の真ん中に移動したと思います。

  3. L キーを押してみましょう。

      現在見えている画面の1番下に移動したと思います。

-------------------------------------------------------------------------------
              2.3 現在のカーソルがある行を基準に移動するコマンド

  1. z <Enter> キーを押してみましょう。

      z キーを押した後に Enter キーを押すということです。
      現在のカーソルのある行が1番上にくるように画面が移動したと思います。
      zt キーでも同じ動作をします。

  2. zz とタイプしてみましょう。

      現在のカーソルのある行が真ん中にくるように画面が移動したと思います。

-------------------------------------------------------------------------------
                   2.4 行内の指定した文字に移動するコマンド

  1. 以下の ---> と示されたテキストにカーソルを移動しましょう。

  2. fc とタイプしてみましょう。

      カーソルが右の c の文字まで移動したと思います。
      カーソルよりも右にある f キーの後に指定した文字に移動する事ができます。

  3. 今度は Fr とタイプしてみましょう。

      カーソルが左の r の文字まで移動したと思います。
      f キーと逆の動作をします。

  4. 今度は tc とタイプしてみましょう。

      カーソルが右の c の文字の*手前*まで移動したと思います。
      1つ手前に移動する点が f キーとは違います。
      T キーで同じように左の指定した文字の手前に移動することができます。

  5. ; キーを押してみましょう。

      カーソルが右の c の文字の手前まで移動したと思います。
      ; キーでは最後に行った f F t T キーの動作を繰り返す事が出来ます。

  6. ,キーを押してみましょう。

      カーソルが左の c の文字の手前まで移動したと思います。
      , キーでは最後に行った f F t T キーの動作を逆向きに繰り返す事が出来ます。

  NOTE:
      逆向きとは、f t キーが最後に行っていた場合、f t キーは右向きのため、
      左向きに繰り返す。F T キーの場合は、左向きのため、右向きとなります。

---> Practice makes perfect.
     訳:習うより慣れよ。(まさにVimがそうですね。)

-------------------------------------------------------------------------------
                   2.5 カーソル下の文字を元に検索するコマンド

  1. 以下の ---> で示されたテキストの
  「Practice」にカーソルを移動しましょう。

---> Practice makes perfect.

  2. * キーを押してみましょう。

      カーソルがこの行にある「Practice」まで移動したと思います。

  3. そのまま、# キーを押してみましょう。

      カーソルが元の位置の「Practice」まで移動したと思います。

-------------------------------------------------------------------------------
                                  2章 まとめ

  1. 画面単位で移動するコマンド

      <C-b> キー : 1画面上に移動
      <C-f> キー : 1画面下に移動
      <C-u> キー : 半画面上に移動
      <C-d> キー : 半画面下に移動

  2. 現在の画面内で移動するコマンド

      H キー : 現在の画面の1番下に移動
      M キー : 現在の画面の1番下に移動
      L キー : 現在の画面の1番下に移動

  3. カーソルを基準に移動するコマンド

      z <Enter> または zt : 現在のカーソルが1番上にくるように移動
      zz                  : 現在のカーソルが真ん中にくるように移動

  4. 指定した文字に移動するコマンド

      f 任意の文字 : 右にある指定した文字に移動
      t 任意の文字 : 右にある指定した文字の手前に移動
      F 任意の文字 : 左にある指定した文字に移動
      T 任意の文字 : 左にある指定した文字の手前に移動
      ;            : 最後に行ったf F t T キーの動作を繰り返す
      ,            : 最後に行ったf F t T キーの動作を逆向きに繰り返す

  NOTE:
      f t F T キーではカウントを利用するとより便利になります。
      2fc とタイプした場合、カーソルの位置から右に2個目の c に移動できます。
      また、直前のf t F T キーでカウントを使用していても
      ; , キーでは1個目の文字まで移動します。

  5. カーソル下の文字を元に検索するコマンド

      * : カーソルの下の文字を前方に検索
      # : カーソルの下の文字を後方に検索

===============================================================================
3章 編集 - ノーマルモード -                                          < 231行 >

-------------------------------------------------------------------------------
                               3.1 削除コマンド

  1. 以下の ---> で示された2番目のテキストの
  「これ以降～」の「こ」の部分にカーソルを移動しましょう。

  2. D キーを押してみましょう。

      カーソルより後ろのテキストが削除された事がわかると思います。

  2. そのまま dk キーを押してみましょう。

      現在の行と、1つ上の行が削除された事がわかると思います。

  3. そのまま dj キーを押してみましょう。

      現在の行と、1つ下の行が削除された事がわかると思います。
      これで全ての行が削除されましたね。

---> 1.これはサンプルテキストです。
---> 2.これはサンプルテキストです。これ以降の文章は不要です。
---> 3.これはサンプルテキストです。
---> 4.これはサンプルテキストです。

-------------------------------------------------------------------------------
                            3.2 削除&挿入コマンド

  1. 以下の ---> で示されたテキストの
  「間違っい～」の「い」の文字にカーソルを移動しましょう。

  2. C キーを押してみましょう。

      カーソルより後ろのテキストが削除され、
      インサートモードに入った事がわかると思います。

  3. 入力が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

  4. そのまま S キーを押してみましょう。

      現在のカーソルがある行が削除され、
      インサートモードに入った事がわかると思います。

  NOTE:
      cc キーでも同じ事ができます。好きな方を使って下さい。
      一方を使わないなら好きな動作にマッピングするといいでしょう。

  5. 入力が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

     サンプルテキストです、これは間違っているテキストです。
---> サンプルテキストです、これは間違っいるテストです。

-------------------------------------------------------------------------------
                 3.3 文字のケース(大文字/小文字)を切り換える

  1. 以下の ---> で示されたテキストの「E」にカーソルを移動しましょう。

  2. ~ を押してみましょう。

      大文字の E から小文字の e に変わったと思います。

  3. もう一度~ を押してみましょう。

      今度は小文字の a が大文字の A に変わったと思います。
      ちょっとした1文字のケースを変えたい時に便利だったりします。

---> Easy come, easy go.
     (訳:得やすいものは失いやすい,悪銭は身につかない)

-------------------------------------------------------------------------------
                           3.4 直前の動作を繰り返す

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  2. dd とタイプしてみましょう。

  3. . キーを押してみましょう。

      テキストが再び1行削除されたと思います。
      このコマンドは直前の動作を繰り返す事が出来ます。

---> サンプルテキストです、これは間違っいるテストです。
     サンプルテキストです、これは間違っいるテストです。

  4. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  5. 2dd とタイプしてみましょう。

  6. . キーを押してみましょう。

      テキストが2行削除されたと思います。
      直前の指定したカウントもそのまま繰り返す事ができます。

---> サンプルテキストです、これは間違っいるテストです。
     サンプルテキストです、これは間違っいるテストです。
     サンプルテキストです、これは間違っいるテストです。
     サンプルテキストです、これは間違っいるテストです。

-------------------------------------------------------------------------------
                             3.5 数値を増減させる

  1. 以下の ---> で示されたテキストの先頭にカーソルを移動しましょう。

  2. <C-a> キーを押してみましょう。

      1つ数値が増えたと思います。
      また、自動でカーソルよりも右にある最初の数字に移動してくれます。

  3. 2<C-x> とタイプしてみましょう。

      2つ数値が減ったと思います。
      このようにカウントが指定可能です。

---> 1dd

-------------------------------------------------------------------------------
                                  3.6 マクロ

  1. 以下の ---> で示されたテキストの先頭にカーソルを移動しましょう。

  2. qa とタイプしてみましょう。

      記録中または,Recordingと左下に表示されたと思います。
      これでマクロの記録をレジスタ a に開始しました。
      q キーの後に押したキーがマクロの記録先になります。

  3. Yp<C-a> とタイプしてみましょう。

      1つ下の行にコピーをし、数値を1増やす動作をしました。

  4. q をもう一度押してみましょう。

      これでマクロの記録を終了しました。
      これでレジスタ a に先程の Yp<C-a> の動作が記録されました。

---> 1dd

  5. 以下の ---> で示されたテキストの先頭にカーソルを移動しましょう。
  6. @a とタイプしてみましょう。

      このコマンドでは、@の後に指定されたレジスタの内容を再生する事が出来ます。

  7. そのまま4@a とタイプしてみましょう。

---> 1dd

-------------------------------------------------------------------------------
                             3.7 インデントの調整

  1. 以下の ---> で示されたテキストの先頭にカーソルを移動しましょう。

  6. >> とタイプしてみましょう。

      インデントが1つ分挿入されたと思います。

  7. << とタイプしてみましょう。

      今度は、インデントが1つ分削除されたと思います。

---> Failure teaches success.
     (訳:失敗は成功の元)

-------------------------------------------------------------------------------
                              3.8 行を連結させる

  1. 以下の ---> で示されたテキストの先頭にカーソルを移動しましょう。

  6. J とタイプしてみましょう。

      現在の行と1個下の行が連結されたと思います。

  7. そのまま 2gJ とタイプしてみましょう。

      現在の行と2個下までの行が連結されたと思います。
      また、gJ では J と違って連結した際に空白を入れないで連結をします。

--> The first step is 
always 
the 
hardest.

-------------------------------------------------------------------------------
                                  3章 まとめ

  1. 削除コマンド

      D キー  : カーソルより後ろのテキストを削除
      dk キー : 現在の行と、1つ上の行を削除
      dj キー : 現在の行と、1つ下の行を削除

  2. 削除&挿入コマンド

      C キー : カーソルより後ろのテキストを削除しインサートモードに入る
      S キー : 現在のカーソルがある行を削除しインサートモードに入る

  3. 文字のケース(大文字/小文字)を切り換える

      ~ キー : 大文字は小文字に、小文字は大文字に切り換える

  4. 直前の動作を繰り返す

      . キー : 直前の動作を繰り返す

  5. 数値を増減させる

      <C-a> キー : カーソルの下もしくは右にある最初の数値を1つ増加させる
      <C-x> キー : カーソルの下もしくは右にある最初の数値を1つ減少させる

  6. マクロ

      q キー : q キーの後に指定したキーにマクロの記録開始
      q キー : 一度 q キーを押してマクロの記録を開始している場合、記録終了
      @ キー : @ キーの後に指定したキーのレジスタを元にマクロの再生

  NOTE:
      マクロの記録先には小文字のアルファベットが指定できる。
      マクロの記録先の指定で、q キーの後に大文字のアルファベットを指定した場合、
      既にあるその小文字のアルファベットのマクロの内容に
      新しく記録した内容を追加することができる。

  7. インデントを調整する

      >> キー : インデントを1つ分挿入 
      << キー : インデントを1つ分削除 

  8. 行を連結させる

      J キー : 現在の行と1つ下の行を連結する。

===============================================================================
4章 編集 - インサートモード -                                        < 156行 >

-------------------------------------------------------------------------------
                        4.1 上または下の行から挿入する

  1. 以下の ---> で示されたテキストの
  「間違っい～」の「い」の文字にカーソルを移動しましょう。

  2. C キーを押してみましょう。

      1つ前のコマンドの復習です。

  3. インサートモードのまま <C-y> キーを長押ししてみましょう。

      テキストが勝手に挿入されたと思います。
      このコマンドは現在のカーソルの上の行の同じ位置の文字を挿入することができます。

     サンプルテキストです、これは間違っているテキストです。
---> サンプルテキストです、これは間違っいるテストです。

  4. 入力が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

  5. 以下の ---> で示されたテキストの
  「間違」の「違」の文字にカーソルを移動しましょう。

  6. インサートモードのまま <C-e> キーを長押ししてみましょう。

      テキストが勝手に挿入されたと思います。
      このコマンドは現在のカーソルの下の行の同じ位置の文字を挿入することができます。

---> サンプルテキストです、これは間違
     サンプルテキストです、これは間違っているテキストです。

  7. 入力が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

-------------------------------------------------------------------------------
                     4.2 直前に入力されたテキストの再挿入

  1. 以下の ---> で示されたテキストの
  「間違っている～」の「る」の文字にカーソルを移動しましょう。
  2. a キーを押してインサートモードに入りましょう。
  3. 「テキスト」と入力しましょう。

     サンプルテキストです、これは間違っているテキストです。
---> サンプルテキストです、これは間違っているです。

  4. 入力が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

  5. 以下の ---> で示されたテキストの
  「間違っている～」の「る」の文字にカーソルを移動しましょう。
  4. a キーを押してインサートモードに入りましょう。

  7. インサートモードのまま <C-a> キーを押してみましょう。

      テキストが勝手に挿入されたと思います。
      このコマンドは前回のインサートモードで入力した文字を挿入することができます。

---> サンプルテキストです、これは間違っているです。

  8. 入力が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

  9. 以下の ---> で示されたテキストの
  「間違ってい～」の「る」の文字にカーソルを移動しましょう。
  10. a キーを押してインサートモードに入りましょう。

  11. インサートモードのまま <C-@> キーを押してみましょう。

      テキストが勝手に挿入され、ノーマルモードに戻ったと思います。
      このコマンドは前回のインサートモードで入力した文字を挿入し、
      ノーマルモードに戻ることができます。

---> サンプルテキストです、これは間違っているです。

-------------------------------------------------------------------------------
                                   4.3 補完

  1. 以下の ---> で示されたテキストの「.」にカーソルを移動しましょう。
  2. i キーを押してインサートモードに入りましょう。

  3. インサートモードのまま、まずは l キーを押しましょう。

      普通に l が入力された状態だと思います。

  4. 次に、 <C-n> キーを押しましょう。

      テキストが勝手に補完されたと思います。
      このコマンドでは、カーソルの前と同じキーワードで始まる単語を前方検索し、
      マッチしたキーワードを挿入することが出来ます。
      このようにVimでは標準でテキスト補完が可能です。

---> There is no royal road to .
     There is no royal road to learning.
     訳:学問に王道なし

  5. <Esc> キーを押してノーマルモードに戻りましょう。

  6. 以下の ---> で示されたテキストの「.」にカーソルを移動しましょう。
  7. i キーを押してインサートモードに入りましょう。
  8. インサートモードのまま、まずは l キーを押しましょう。

  9. 次に、 <C-p> キーを2回押しましょう。

      このように繰り返して押す事により、表示された補完リスト内を移動して
      補完する単語を選ぶ事が出来ます。
      <C-n>を押した場合はリスト内を下に移動します。

     There is no royal road to learning.
---> There is no loyal road to .
     (loyal はワザとです)

  10. <Esc> キーを押してノーマルモードに戻りましょう。

-------------------------------------------------------------------------------
                           4.4 インデントを調整する

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。
  2. i キーを押してインサートモードに入りましょう。

  3. インサートモードのまま、 <C-t> キーを押してみましょう。

      インデントが1つ分挿入されたと思います。

  4. そのまま、 <C-d> キーを押しましょう。

      今度は、インデントが1つ分削除されたと思います。

  5. <Esc> キーを押してノーマルモードに戻りましょう。

---> It's never too late to learn.
     (訳:学ぶのに遅すぎるということはない)

-------------------------------------------------------------------------------
                                  4章 まとめ

  1. 上または下の行から挿入する

      <C-y> キー : 上の行の同じ位置の文字を挿入
      <C-e> キー : 下の行の同じ位置の文字を挿入

  2. 直前に入力されたテキストの再挿入

      <C-a> キー : 前回入力した文字を再度入力する
      <C-@> キー : 前回入力した文字を再度入力した後ノーマルモードに戻る

  3. 補完

      <C-n> キー : カーソルの直前の文字列を元に前方検索をし、単語を補完
      <C-p> キー : カーソルの直前の文字列を元に後方検索をし、単語を補完

  4. インデントを調整する

      <C-t> キー : インデントを1つ分挿入
      <C-d> キー : インデントを1つ分削除


===============================================================================
5章 編集 - ヴィジュアルモード -                                      < 151行 >

-------------------------------------------------------------------------------
                          5.1 行単位の範囲選択をする

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  2. V キーを押してみましょう。

      現在の行が選択されたと思います。

  3. ヴィジュアルモードのまま j キーなどで移動をしてみましょう。

      行単位で選択が出来ていると思います。

---> サンプルテキストです。
     サンプルテキストです。Vimでは簡単に行単位で選択できます。

  4. 確認が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

-------------------------------------------------------------------------------
                         5.2 範囲選択の始点を変更する

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  2. v キーを押してみましょう。

  3. ヴィジュアルモードのまま j キーなどで移動をしてみましょう。

  4. 移動をしたら、 o キーを押してみましょう。

      範囲選択の始点が o キーを押した場所に変わったと思います。
      勿論 V キーでの行単位の範囲選択でも使用可能です。

---> サンプルテキストです。
     サンプルテキストです。Vimでは簡単に行単位で選択できます。

  5. 確認が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

-------------------------------------------------------------------------------
                           5.3 文字のケースを変える

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  2. v キーを押してみましょう。

  3. ヴィジュアルモードのまま w キーなどで移動をしてみましょう。

  4. 移動をしたら、 U キーを押してみましょう。

      範囲選択されたアルファベットが全て大文字に変わったと思います。

---> Practice makes perfect.

  5. 確認が終わったら、 <Esc> キーを押してノーマルモードに戻りましょう。

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  2. v キーを押してみましょう。

  3. ヴィジュアルモードのまま w キーなどで移動をしてみましょう。

  4. 移動をしたら、 u キーを押してみましょう。

      今度は、範囲選択されたアルファベットが全て小文字に変わったと思います。

---> The first step is always the hardest.
     訳:最初の一歩がいつでも一番難しい

-------------------------------------------------------------------------------
                           5.4 インデントを調整する

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。
  2. v キーを押してヴィジュアルモードに入りましょう。

  3. ヴィジュアルモードのまま、 > キーを押してみましょう。

      インデントが1つ分挿入されたと思います。

  4. <Esc> キーを押してノーマルモードに戻りましょう。

  5. v キーを押してヴィジュアルモードに入りましょう。

  6. j キーを押して1つ下の行も選択しましょう。

  7. < キーを押しましょう。

      今度は、インデントが1つ分削除されたと思います。
      また、複数行選択されている場合は、全ての行に対して行われます。

  8. <Esc> キーを押してノーマルモードに戻りましょう。

---> It's never too late to learn.
        ---> It's never too late to learn.

-------------------------------------------------------------------------------
                           5.5 連番にする

  1. 以下の ---> で示されたテキストの
  「1.」の「1」にカーソルを移動しましょう。

      一番上の「one」を書かれているテキストではなく「two」のテキストです。

  2. V キーを押してヴィジュアルモードに入りましょう。

  3. j キーを2回押して2つ下の行まで選択しましょう。

  4. ヴィジュアルモードのまま、 g <C-a> とタイプしてみましょう。

      数字が自動で連番になったと思います。
  NOTE:
      普通に <C-a> を押しただけでは、全て数値が1増えるだけで、連番にはなりません。
      g <C-a> とタイプする事を忘れないで下さい。

     1. one
---> 1. two
     1. three
     1. four

-------------------------------------------------------------------------------
                                  5章 まとめ

  1. 行単位の範囲選択をする

      V キー : 行単位で範囲選択を開始する

  2. 範囲選択の始点を変更する

      ヴィジュアルモードで o キー : カーソルの位置を範囲選択の始点にする

  3. 文字のケースを変える

      ヴィジュアルモードで U キー : 選択範囲のアルファベットを全て大文字にする
      ヴィジュアルモードで u キー : 選択範囲のアルファベットを全て小文字にする

  4. インデントを調整する

      ヴィジュアルモードで > キー : インデントを1つ分挿入
      ヴィジュアルモードで < キー : インデントを1つ分削除

  NOTE:
      ノーマルモードでのインデントの調整と押す回数が違うので注意してください。

  5. 連番にする

      ヴィジュアルモードで g <C-a> : 連番にする

  NOTE:
      矩形選択でも使用可能です。

===============================================================================
6章 編集 - 応用編 -                                                  <  71行 >

-------------------------------------------------------------------------------
                 6.1 d y c キーと f t F T キーを組み合わせる

  1. 以下の ---> で示されたテキストの
  「Failure」の「F」にカーソルを移動しましょう。

  2. dfl とタイプしましょう。

      カーソルがあった 「F」から次の「l」の文字まで削除されました。
      d コマンドではその後に移動するコマンドを削除する範囲指定に使えます。
      fl とタイプしましたので、 l までを削除するコマンドになりました。

  NOTE:
      同じように y c コマンドでもコマンドの後にカーソルが
      移動するコマンドを範囲指定に使う事が出来ます。
      d y c などのコマンドはオペレータと言います。

  3. 今度は、 yts とタイプしてみましょう。

      カーソルの位置からsの手前までがヤンクされました。

  4. そのまま、 P キーを押しましょう。

      ヤンクされた内容を確認しましょう。

---> Failure teaches success.
     Failure teaches success.

-------------------------------------------------------------------------------
                     6.2 d y c キーと 検索 を組み合わせる

  1. 以下の ---> で示されたテキストの
  「Failure」の「F」にカーソルを移動しましょう。

  2. d/is とタイプしましょう。

      カーソルがあった 「F」から次の検索した結果の is までが削除されました。

  NOTE:
      検索も移動するコマンドなので、同じように y c コマンドでも使用可能です。
      同様に、 * # でも使用可能です。
      if ～ else/function ～ endfunction までを削除などが可能です。

---> Failure teaches success.
     There is no royal road to learning.

-------------------------------------------------------------------------------
                                  6章 まとめ

  1. d y c キーと f t F T キーを組み合わせる

      df 文字 : カーソルから f キーの後で選択した文字まで削除
      yt 文字 : カーソルから t キーの後で選択した文字までヤンク

  NOTE:
      ここに挙げているのは一例です。それぞれ組み合わせて使う事ができるので
      活用してみるといいでしょう。
      また、f t などだけでなく、一緒に紹介した ; , も使用可能です。

  1. d y c キーと f t F T キーを組み合わせる

      d/ 文字列 : カーソルから / キーの後で入力した文字列まで削除

  NOTE:
      これらの移動をするコマンドは総称して motion モーションと呼ばれます。
      VimのHelpファイルを見た時にコマンドの後に{motion}とあった場合、これらの
      コマンドが使用可能という事を示します。

===============================================================================
7章 テキストオブジェクト                                             < 150行 >

-------------------------------------------------------------------------------
                         7.1 テキストオブジェクトとは

  Vimの標準機能として、テキストオブジェクトというものがあります。
  テキストオブジェクトとは、その名の通りテキストの集りを一纏めとして
  コマンドの処理対象として扱う事ができる機能です。使いこなせると便利です。
  この章では、まずテキストオブジェクトとはどんなものかという例を紹介し、
  その後に詳細の解説を入れ、再度使用例を入れています。

-------------------------------------------------------------------------------
                   7.2 テキストオブジェクトとはどんなものか

  1. 以下の ---> で示されたテキストの「The」の「h」にカーソルを移動しましょう。

  2. daw とタイプしましょう。

      通常、単語を削除するには、 dw で削除しますが、カーソルが途中にあると
      カーソルよりも前の部分は残ってしまいます。
      そんな問題を解決するのがこのコマンドです。
      このコマンドでは、カーソルの下にある単語を削除することができます

---> The first step is always the hardest.

  3. 以下の ---> で示されたテキストの「msg」にカーソルを移動しましょう。

  4. dib とタイプしましょう。

      括弧の中の文字列が削除されたと思います。
      このコマンドでは、括弧の中にある単語を削除することができます

---> func! s:echoError(msg)

-------------------------------------------------------------------------------
                        7.3 テキストオブジェクトの解説

  先程の例を用いて解説をします。dib とタイプしてもらいましたが、
  このうちテキストオブジェクトにあたるのは後ろ2文字の ib の部分です。

  まず、テキストオブジェクトは2つの部品に分けることができます。
  まず1つ目の部品は、テキストオブジェクトの範囲を指定する部品です。
  大まかに分けて2通りあります。

      a : テキストオブジェクト全体を指定する
      i : テキストオブジェクト内部を指定する

  例で言うと dib の真ん中の i の部分です。
  テキストオブジェクト b の内部を削除( d )するコマンドになります。
  テキストオブジェクト b が何かというのは次で解説します。

  2つ目の部品は、テキストオブジェクトそのものです。
  これは覚えるしかないですが、このような種類があります。
  使いながら覚えて下さい。

      " : 二重引用符 "
      ' : 一重引用符 '
      w : 単語
      b : 括弧 (
      ( : 括弧 (
      t : タグ
      [ : 括弧 [
      { : 括弧 {
      B : 括弧 {
      < : 括弧 <
      W : 単語(空白含む)
      ` : 引用符 `
      p : 段落
      s : 文章

  この2つの部品を組み合わせたものがテキストオブジェクトとなります。
  テキストオブジェクトの例: i" a ' aw i( ib

  また、テキストオブジェクトだけでは何の効果もないので、その前に何かしらの
  コマンドと組み合わせて使います。
  例えば、 d c y v などです。

-------------------------------------------------------------------------------
                       7.4 テキストオブジェクトの使用例

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  2. ci' とタイプしましょう。

      ''で囲まれた範囲が削除され文字の挿入が出来るようになったと思います。
      解説: c i ' なので ' 内部(中)を c (削除&挿入)するコマンドになります。

  NOTE:
      また、' " をテキストオブジェクトとして指定した場合は、カーソルの下が対象
      でない場合、自動で右に検索して移動してくれます。
      括弧などは移動してくれないので注意してください。

---> call s:echoError('Please set variables')

  3. 以下の ---> で示されたテキストにカーソルを移動しましょう。

  4. dat とタイプしましょう。

      タグが、内容ごと全て(全体)削除されたと思います。
      解説: d a t なので t 全体を d (削除)するコマンドになります。

---> <tag>sample</tag>

-------------------------------------------------------------------------------
                                  7章 まとめ

  1. テキストオブジェクトとは

      テキストの集りを一纏めにして処理を可能にしたもの。

  2. テキストオブジェクトの例

      daw : カーソルの下の単語の削除
      dib : 括弧の中の削除

  3. テキストオブジェクトの解説

      以下の二つを組み合わせて使う。

    1. 範囲の指定

      a : テキストオブジェクト全体を指定する
      i : テキストオブジェクト内部を指定する

    2. テキストオブジェクトの指定

      " : 二重引用符 "
      ' : 一重引用符 '
      w : 単語
      b : 括弧 (
      ( : 括弧 (
      t : タグ
      [ : 括弧 [
      { : 括弧 {
      B : 括弧 {
      < : 括弧 <
      W : 単語(空白含む)
      ` : 引用符 `
      p : 段落
      s : 文章

  4. テキストオブジェクトの例

      daw : カーソルの下の単語の削除
      dib : 括弧の中の削除

  NOTE:
      実際に使ってみないとわかりづらかったりするので、実践あるのみ。

===============================================================================
8章 矩形選択                                                         <  86行 >

-------------------------------------------------------------------------------
                                 8.1 矩形選択

  1. 以下の ---> で示されたテキストの
  「テキスト」の「テ」の文字にカーソルを移動しましょう。

  2. <C-v> キーを押しましょう。

      ヴィジュアルモードに入りましたが、矩形選択は普通のヴィジュアルモード
      での選択とは異なります。

  3. j キーを押しましょう。
  4. l キーを押しましょう。

      選択範囲が通常のヴィジュアルモードと異なる事がわかると思います。
      矩形選択では、四角いブロックのように選択する事が可能です。

  NOTE:
      矩形選択で特に便利なのは、平文をマークダウンなどのリストにする時です。

  5. e キーを押しましょう。
  6. x キーを押しましょう。

      この様に縦にブロック状に文字を消したい、文字を変更したい、
      などといった場合にとても重宝します。

---> サンプルテキストです。
     サンプルテキストです。

-------------------------------------------------------------------------------
                       8.2 矩形選択を使用した文字の挿入

  1. 以下の ---> で示されたテキストの行頭にカーソルを移動しましょう。
  2. <C-v> キーを押しましょう。
  3. j キーを2回押しましょう。
  4. e キーを押しましょう。

  5. A キーを押しましょう。

  6. 文字を何かしらタイプしましょう。

  7. <Esc> キーを押してノーマルモードに戻りましょう。

      タイプした文字が自動で矩形選択された範囲の後ろに挿入されます。

  NOTE:
      A キーの代わりに I キーを使用すれば、選択範囲の前に挿入が可能です。
      a キー または i キーでは挿入できないので注意してください。

---> Failure teaches success
     It's never too late to learn
     It's never too late to learn

  7. 以下の ---> で示されたテキストの行頭にカーソルを移動しましょう。
  8. <C-v> キーを押しましょう。
  9. j キーを2回押しましょう。
  10. $ キーを押しましょう。

      各行の行末まで選択されている事に注目。
      また、テキストの長さが異なっていても行末まで選択されています。

  11. A キーを押しましょう。

  12. . を入力しましょう。

  13. <Esc> キーを押してノーマルモードに戻りましょう。

      タイプした文字が行末に挿入されます。
      末尾にプログラムの終端文字(記号)を一括で入れるなどに使えます。

  NOTE:
      先程やった通常の挿入に対し、今回は行末に挿入するという点が異なります。
      $ キーを押すか押さないかで動作が異なるので注意してください。

-------------------------------------------------------------------------------
                                  8章 まとめ

  1. 矩形選択

      <C-v> キー  : 矩形選択の開始

  2. 矩形選択を使用した文字の挿入

      A キー                     : 矩形選択された範囲の後ろに移動し挿入
      I キー                     : 矩形選択された範囲の前に移動し挿入
      $ キー を押してから A キー : 矩形選択された範囲の行末に移動し挿入

===============================================================================
9章 ウィンドウ                                                       < 150行 >

-------------------------------------------------------------------------------
                         9.1 バッファ、ウィンドウとは

  バッファとは、ファイルをメモリに読み込んだ状態の事を言う。
  わかりづらい場合は、Vim上で編集しているファイルそのものの事を指していると
  捉えてもらって構わない。
  従って1つのファイルに対して1つのバッファが割り当てられるという事です。

  ウィンドウとは、バッファの表示領域の事で、1つのバッファに対し複数ウィンドウ
  を開く事が可能です。

  では、実際にウィンドウがどんなものか触ってみましょう。

-------------------------------------------------------------------------------
                           9.2 ウィンドウを分割する

  1. :sp とタイプしましょう。

      ウィンドウが2つに増えたと思います。
      これは、水平に分割するコマンドです。

  2. :q とタイプしましょう。

      ウィンドウが1つ減り、1つだけになったと思います。
      複数ウィンドウがある場合は、 :q では、
      最後のウィンドウでない限りVimは終了しません。

  3. :vs とタイプしましょう。

      ウィンドウが2つに増えたと思います。
      これは、垂直に分割するコマンドです。

  5. <C-w> c とタイプしましょう。

      現在のウィンドウを閉じる事が出来ます。
      :q と同じ動作をします。また、 <C-w> q も同じ動作をします。
      現在のウィンドウは、カーソルがあるウィンドウのことです。

  6. <C-w> s とタイプしましょう。

      横に分割する事が出来ます。

  7. <C-w> v とタイプしましょう。

      横に分割する事が出来ます。

  8. <C-w> o とタイプしましょう。

      現在のウィンドウ以外を全て閉じる事が出来ます。
      間違えてタイプしないように注意しましょう。

  NOTE:
      <C-w> s 及び <C-w> v はウィンドウを分割出来ます。
      :sp 及び :vs も同じ動作をしますが、それぞれのコマンドの後にファイル名が
      指定できます。ファイル名を指定した場合、そのファイルを分割して開くという
      動作になります。

-------------------------------------------------------------------------------
                           9.3 ウィンドウを移動する

  1. 何でもいいので2回ウィンドウを分割しましょう。

  2. <C-w> h とタイプしましょう。

      カーソルが1つ左のウィンドウに移動したと思います。
      このコマンドでは1つ左のウィンドウに移動する事が出来ます。

  3. <C-w> j とタイプしましょう。

      カーソルが1つ下のウィンドウに移動したと思います。
      このコマンドでは1つ下のウィンドウに移動する事が出来ます。
      お察しの通り、<C-w> k で1つ上に、<C-w> l で1つ右に移動することが可能です。

  5. <C-w> t とタイプしましょう。

      一番左上にあるウィンドウに移動が出来ます。
       t op-left の t から来ています。

  6. <C-w> b とタイプしましょう。

      一番右下にあるウィンドウに移動が出来ます。
       b ottom-right の b から来ています。
      そのまま次に進みましょう。

-------------------------------------------------------------------------------
                       9.4 ウィンドウのサイズを変更する

  6. <C-w> + とタイプしましょう。

      現在のウィンドウの高さが増えたと思います。
      このコマンドでは、現在のウィンドウの高さを 1 増やす事が可能です。
      反対に <C-w> - では 1 減らす事が出来ます。

      何回も押して調整するのはめんどくさいので、このコマンドをタイプする前に
      カウントを指定した方が楽です。

  2. <C-w> > とタイプしましょう。

      現在のウィンドウの幅が増えたと思います。
      このコマンドでは、現在のウィンドウの幅を 1 増やす事が可能です。
      反対に <C-w> - では 1 減らす事が出来ます。

  3. <C-w> = とタイプしましょう。

      このコマンドでは自動でウィンドウを同じ大きさにする事が出来ます。

-------------------------------------------------------------------------------
                                  8章 まとめ

  1. バッファ、ウィンドウとは

      バッファ   : メモリに読み込まれているファイルの事
      ウィンドウ : バッファを読み込んでいる1つの画面の事(複数表示可能)

  2. ウィンドウを分割する

      :sp または <C-w> s               : 水平にウィンドウを分割
      :vs または <C-w> v               : 垂直にウィンドウを分割
      :q または <C-w> c または <C-w> q : 現在のウィンドウを閉じる
      <C-w> o                          : 現在のウィンドウを以外を閉じる

  2. ウィンドウを移動する

      <C-w> h                          : 1つ左のウィンドウに移動
      <C-w> j                          : 1つ下のウィンドウに移動
      <C-w> k                          : 1つ上のウィンドウに移動
      <C-w> l                          : 1つ右のウィンドウに移動
      <C-w> t                          : 1番左上のウィンドウに移動
      <C-w> b                          : 1番右下のウィンドウに移動

  2. ウィンドウのサイズを変更する

      <C-w> +                          : 現在のウィンドウの高さを1つ増やす
      <C-w> -                          : 現在のウィンドウの高さを1つ減らす
      <C-w> >                          : 現在のウィンドウの幅を1増やす
      <C-w> <                          : 現在のウィンドウの幅を1つ減らす
      <C-w> =                          : 全てのウィンドウを同じ大きさにする

  NOTE:
      他にも様々なウィンドウ関連のコマンドがあります。是非helpを見ましょう。
      :help CTRL-W
      また、タブページという似たような機能もあります。
      :help tabpage

===============================================================================
10章 Exコマンド                                                      < 150行 >

      Exコマンドとは : から始まるコマンドのことです。
      また、ここでは一部の便利なExコマンドを紹介しています。
      それ以外はhelpを参照してください。
      :help ex-cmd-index

      []で囲まれた範囲はそのコマンドを実行する時省略が可能です。
      例: :t[est] --> :t だけで test コマンドとして実行可能

-------------------------------------------------------------------------------
                      10.1 検索パターンを元に操作をする

      ここでは～とタイプしましょう。という表記であった場合、
      最後に<Enter> キーを押して下さい。

  1. :g[lobal]/^\s\+test/d_ とタイプしましょう。

      test 
      この上の行が削除されたと思います。
      これは少し難しいですが、使いこなせれば強力です。
      このコマンドの解説をします。

      まず、このコマンドは :global というExコマンドです。
      省略して :g でも構いません。

      コマンドの後にある / はただの区切りです。
      1つ目の区切りの後にくるのは、検索パターンです。
      global コマンドでは、この検索パターンに合った全ての行に対して、
      2つ目の区切りの後にタイプしたExコマンドが実行可能です。
      
      今回は d_ というExコマンドを使用しました。
      これは行を削除をするコマンドです。
      検索パターンの部分にあるのは、正規表現を用いています。
      詳しく知りたい場合は、:help regexp を見て下さい。

  NOTE:
      global コマンドの反対の動作(検索パターン以外の行にExコマンドを実行する)
      をするコマンドは :global! または、 :vglobal 略称 :v があります。

-------------------------------------------------------------------------------
                   10.2 ノーマルモードのコマンドを実行する

  1. 以下の ---> で示されたテキストにカーソルを移動しましょう。
  2. :norm[al] Atest. とタイプしましょう。

      文章の末尾に test. が入力されたと思います。
      このコマンドでは :normal の後にタイプした文字列を
      ノーマルモードでその内容がタイプされたとしてその内容を実行します。

  NOTE:
      ここで指している文字列はVimの式の文字列ではありません。
      :normal! と感嘆符を付けると実際にユーザーがタイプしたように実行します。
      これだけでなく、他のExコマンドと組み合わせて使う事が多いかと思います。

---> This is 

-------------------------------------------------------------------------------
             10.3 ウィンドウ、タプページ全体にコマンドを実行する

  1. :windo normal L をタイプしましょう。

      このコマンドではウィンドウ全てを対象に
      その後に書いたコマンドを実行します。
      今回は normal L つまりノーマルモードでLキーを押す動作を
      全てのウィンドウに実行しました。

  NOTE:
      対象になるウィンドウは、現在のタブページのみです。
      また、タブ全体に実行するExコマンドは :tabdo で、同じ使用方法です。

-------------------------------------------------------------------------------
                                  10.4 grep

  1. :vim[grep][!] /検索パターン/ ファイル ...

      このコマンドでは ファイル で指定した全ファイルに対して、
      検索パターン に一致した行をエラーリストに追加できます。
      通常は自動でエラーリストが開かれると思います。
      ... は繰り返しを表しています。

      通常の grep もVimでは使用可能ですが、こちらでやるメリットはVimの正規表現
      が使用可能という点です。

  2. :gr[ep] 引数

      通常の grep をVimから使います。
      結果は QuickFix リストに追加されます。

  NOTE:
      簡易的な説明で、使用出来るという事を示しているだけなので
      各helpを参照してください。
      :help :vim
      :help :grep

-------------------------------------------------------------------------------
                                 10章 まとめ

  1. 検索パターンを元に操作する

      :g[lobal]/検索パターン/Exコマンド  : 検索に一致した全行にコマンド実行
      :v[global]/検索パターン/Exコマンド : 検索に不一致した全行にコマンド実行

  NOTE:
      :vglobal は :global! でも構わない。

  2. ノーマルモードのコマンドを実行する

      :norm[al] コマンド : ノーマルモードのコマンドを実行

  3. ウィンドウ、タプページ全体にコマンドを実行する

      :windo Exコマンド : 全ウィンドウにコマンドを実行
      :tabdo Exコマンド : 全タブページにコマンドを実行

  4. grep

      :vim[grep][!] /検索パターン/ ファイル ... : Vimの検索パターンでgrep
      :gr[ep][!] 引数 : Vimの検索パターンでgrep

==============================================================================
vi:set ts=8 sts=4 tw=78 nonu:
